%% Working with voxel fomat
% Often imaging data is provided in voxel format.  However, as
% ValoMC uses tetrahedrons as the basis elements, the data are not
% directly compatible. This example demonstrates how to move between
% the two formats.

%% Creating a rectangular 3d mesh
% To create a mesh that can be easily mapped to a voxel grid the
% function createGridMesh can be used

clear all;



% x_arr = -2:1:2;
% y_arr = -2:1:2;
% z_arr = -2:1:2;
% 
% vmcmesh = createGridMesh(x_arr, y_arr, z_arr); % function provided by ValoMC
% 
% nvoxels_total = length(x_arr)*length(y_arr)*length(z_arr);
% voxels_in_a_yx_slice = length(y_arr)*length(x_arr);
% 
% %% Visualization of the mesh
% % The structure of the mesh is similar as in the 2d version (see
% % pixeltest.m).  Each voxel consists of 6 tetrahedrons. Vectors x_arr,
% % y_arr and z_arr contain the center of each voxel. The elements 1 to
% % nvoxels_total contain the first tetrahedron in a voxel,
% % nvoxels_total to 2*nvoxels_total the second and so on.  The elements
% % are ordered in the same fashion as the coordinates in meshgrid
% % i.e. Y ascends first, then X and finally Z.  Illustration of the
% % element indices is given in the figure below.
% 
% tetramesh(vmcmesh.H(1:voxels_in_a_yx_slice,:),vmcmesh.r, 'FaceAlpha', ...
%           0.1);
% hold on;
% xlabel('x');
% ylabel('y');
% zlabel('z');
% 
% % draw the element numbers
% for i=1:voxels_in_a_yx_slice
%    element_center = (vmcmesh.r(vmcmesh.H(i,1),:) + vmcmesh.r(vmcmesh.H(i,2),:) ...
%                      + vmcmesh.r(vmcmesh.H(i,3),:) + vmcmesh.r(vmcmesh.H(i,4),:)) * 0.25;
%    text(element_center(1), element_center(2), element_center(3), num2str(i));
% end
% 
% view(-110,50);
% snapnow;
% hold off;
%  
% Create a finer mesh
h_disc=1/2^5;
x_arr = h_disc/2:h_disc:1-h_disc-h_disc/2;
y_arr = h_disc/2:h_disc:1-h_disc-h_disc/2;
z_arr = h_disc/2:h_disc:1-h_disc-h_disc/2;
% h_disc=0.2;
% x_arr = -1.0+h_disc/2:h_disc:1.0-h_disc/2;
% y_arr = -1.0+h_disc/2:h_disc:1.0-h_disc/2;
% z_arr = h_disc/2:h_disc:2.0-h_disc/2;


vmcmesh = createGridMesh(x_arr, y_arr, z_arr); % function provided by ValoMC
vmcmedium = createMedium(vmcmesh);


%% Create an anisotropic parameter distribution 
[X,Y,Z] = meshgrid(x_arr,y_arr,z_arr); % Matlab function
% F = 1.3+cos(X*3).*cos(Y*3).*cos(Z*3)*0.2+0.2; 
% slice(X, Y, Z, F, 0, 0, 0);
% xlabel('x [mm]');
% ylabel('y [mm]');
% zlabel('z [mm]');
% c=colorbar;
% c.Label.String = 'Refractive index';
% view(125,25);
% snapnow;

%% Accessing elements using one dimensional indexing
% Note that since there are six times as many tetrahedrons as there are grid
% cells, vmcmedium.absorption_coefficient is six times bigger than F
% A complete assignment can be achieved by repeating the array F six times
mua=0.1;
mus=100.0;
mua_mult=1;
mus_mult=1;
muaf=0.05;
muaf_mult=0.08;

vmcmedium.scattering_coefficient_ex = mus;
vmcmedium.scattering_coefficient_em = mus*mus_mult;
vmcmedium.absorption_coefficient_ex_sol = mua; % repeat six times
vmcmedium.absorption_coefficient_ex_f = muaf; % repeat six times
vmcmedium.absorption_coefficient_em_sol = mua_mult*mua+muaf*muaf_mult; % repeat six times

vmcmedium.scattering_anisotropy = 0.9;        
vmcmedium.refractive_index = 1.33;

vmcboundary = createBoundary(vmcmesh, vmcmedium);   % create a boundary for the mesh
vmcmedium=createMedium(vmcmesh, vmcmedium);

% Create a light source
% lightsource = findBoundaries(vmcmesh, 'direction', [0.5 0.5 -0.5], [0.5 0.5 0.5], 1);
% vmcboundary.lightsource(lightsource) = {'direct'};
%% creating sphere in homogenity in fluoroscence
% radius_s=1;
% center_s=[12.5+h_disc/4 12.5+h_disc/4 25-6.25];
% sphere=findElements(vmcmesh, 'sphere', center_s,radius_s);
% vmcmedium.absorption_coefficient_ex_f(sphere)=0.0147;
% vmcmedium.absorption_coefficient_em_sol(sphere)=0.0197;

%% creating point source Point_LS=[0 0 0];
Point_LS=[0.4845 0.4845 0.0];
x_coord=vmcmesh.r(:,1);
y_coord=vmcmesh.r(:,2);
z_coord=vmcmesh.r(:,3);
temp=vmcmesh.BH;
x_coord_1=x_coord(temp(:,1));
x_coord_2=x_coord(temp(:,2));
x_coord_3=x_coord(temp(:,3));
y_coord_1=y_coord(temp(:,1));
y_coord_2=y_coord(temp(:,2));
y_coord_3=y_coord(temp(:,3));
z_coord_1=z_coord(temp(:,1));
z_coord_2=z_coord(temp(:,2));
z_coord_3=z_coord(temp(:,3));
centroid_BH=[(x_coord_1+x_coord_2+x_coord_3)/3,(y_coord_1+y_coord_2+y_coord_3)/3,(z_coord_1+z_coord_2+z_coord_3)/3];
dis_centroid_BH=sum(((centroid_BH-Point_LS).^2),2);
[Min_value,chk_2] = min(dis_centroid_BH);
%chk_1=find((z_coord_1==1) & (z_coord_2==1) & (z_coord_3==1));
lightsource=chk_2;
% %checking soemething
% TR1 = triangulation(double(vmcmesh.BH),vmcmesh.r);
% chk_3=pointLocation(TR1,Point_LS);

% chk_2=z_coord(temp(chk_1,:));
%vmcboundary.lightsource(lightsource) = {'direct'};
vmcboundary.lightsource(lightsource) = {'pencil'};
vmcboundary.lightsource_position(lightsource,:) = Point_LS;
vmcboundary.exterior_refractive_index = 1.33;
figure(1);clf
plot3([vmcmesh.r(vmcmesh.BH(lightsource,1),1) vmcmesh.r(vmcmesh.BH(lightsource,2),1) vmcmesh.r(vmcmesh.BH(lightsource,3),1) vmcmesh.r(vmcmesh.BH(lightsource,1),1)]', ...
    [vmcmesh.r(vmcmesh.BH(lightsource,1),2) vmcmesh.r(vmcmesh.BH(lightsource,2),2) vmcmesh.r(vmcmesh.BH(lightsource,3),2) vmcmesh.r(vmcmesh.BH(lightsource,1),2)]', ...
    [vmcmesh.r(vmcmesh.BH(lightsource,1),3) vmcmesh.r(vmcmesh.BH(lightsource,2),3) vmcmesh.r(vmcmesh.BH(lightsource,3),3) vmcmesh.r(vmcmesh.BH(lightsource,1),3)]','o-')
hold on
plot3(Point_LS(1),Point_LS(2),Point_LS(3),'o')
xlabel('x [mm]');
ylabel('y [mm]');
zlabel('z [mm]');
hold off
options.frequency=0;    
options.photon_count = 1e7;
solution = ValoMC(vmcmesh, vmcmedium, vmcboundary,options);

%% Visualize the solution

TR = triangulation(double(vmcmesh.H),vmcmesh.r); % create a matlab
                                           % triangulation object
                                           % from the mesh

locations = [X(:) Y(:) Z(:)];              % form a 2D matrix from all
                                           % the grid points

indices = pointLocation(TR,locations);     % query the indices of the
                                           % tetrahedrons at grid
                                           % points

indices(isnan(indices)) = 1;               % set the grid points that
                                           % do not belong to the mesh
                                           % to point at the first
                                           % element

% get the values on a grid
grid_fluence = reshape(solution.element_fluence(indices),size(X));

figure(2);clf
slice(X, Y, Z, grid_fluence,  [5.2], [], []);
xlabel('x [mm]');
ylabel('y [mm]');
zlabel('z [mm]');

view(125,25);
snapnow;

% %% Accessing elements using three dimensional indexing
% % Optionally, the medium can be defined using three-dimensional
% % indexing.  If three dimensional indexing is used, ValoMC will
% % assume that createGridMesh has been used to create the mesh. In
% % addition to the solution.element_fluence, ValoMC will return
% % solution.grid_fluence, which represents the fluence in each voxel.
% % It is calculated as a sum of the tetrahedrons in a grid
% % cell.  
% 
% 
% clear vmcmedium;
% clear vmcboundary;
% 
% vmcmedium.scattering_coefficient = 1.0;
% vmcmedium.absorption_coefficient = F;  %refractive index is now a three dimensional array
% vmcmedium.scattering_anisotropy = 0.9;        
% vmcmedium.refractive_index = 1;
% 
% vmcboundary = createBoundary(vmcmesh, vmcmedium);
% 
% lightsource = findBoundaries(vmcmesh, 'direction', [0 0 0], [0 0 10], 1);
% vmcboundary.lightsource(lightsource) = {'cosinic'};
% 
% 
% solution = ValoMC(vmcmesh, vmcmedium, vmcboundary);
% 
% %% Visualize the solution as a voxel map
% % Since 3D array was used to define the scattering coefficient,
% % solution returned contains the field grid_fluence
% 
% slice(X, Y, Z, solution.grid_fluence, 0, 0, 0);
% xlabel('x [mm]');
% ylabel('y [mm]');
% zlabel('z [mm]');
% view(125,25);
% hold
% 
% snapnow;
%% ploting new way
nvoxels= length(vmcmesh.H) / 6;
nx=int16(nvoxels^(1/3));
ny=int16(nvoxels^(1/3));
nz=int16(nvoxels^(1/3));
first = reshape(solution.element_fluence(1:nvoxels), nx,ny,nz);
second = reshape(solution.element_fluence(nvoxels+1:2*nvoxels),nx,ny,nz);
third = reshape(solution.element_fluence(nvoxels*2+1:3*nvoxels),nx,ny,nz);
fourth = reshape(solution.element_fluence(nvoxels*3+1:4*nvoxels),nx,ny,nz);
fifth = reshape(solution.element_fluence(nvoxels*4+1:5*nvoxels),nx,ny,nz);
sixth = reshape(solution.element_fluence(nvoxels*5+1:6*nvoxels),nx,ny,nz);
solution.grid_fluence = (first+second+third+fourth+fifth+sixth)/6;
solution.grid_fluence = solution.grid_fluence/max(max(max(solution.grid_fluence)));
fn=reshape(solution.grid_fluence(:,13,:),size(solution.grid_fluence,1),size(solution.grid_fluence,3));
figure(3);clf
imagesc(z_arr',x_arr', log10(fn));
%J_im1 = imrotate(J_im,90,'bilinear','crop');
xlabel('z [mm]');
ylabel('x [mm]');
%figure
%imshow(J_im1)
colorbar
%colormap(makec2f)

% %slice(X, Y, Z, solution.grid_fluence,  [0.5156], [], []);
% xlabel('x [mm]');
% ylabel('y [mm]');
% zlabel('z [mm]');
% 
% view(125,25);
% snapnow;
%% for flouroscence
first1 = reshape(solution.F_element_fluence(1:nvoxels), nx,ny,nz);
second2 = reshape(solution.F_element_fluence(nvoxels+1:2*nvoxels),nx,ny,nz);
third3 = reshape(solution.F_element_fluence(nvoxels*2+1:3*nvoxels),nx,ny,nz);
fourth4 = reshape(solution.F_element_fluence(nvoxels*3+1:4*nvoxels),nx,ny,nz);
fifth5 = reshape(solution.F_element_fluence(nvoxels*4+1:5*nvoxels),nx,ny,nz);
sixth6 = reshape(solution.F_element_fluence(nvoxels*5+1:6*nvoxels),nx,ny,nz);
solution.grid_fluence1 = (first1+second2+third3+fourth4+fifth5+sixth6)/6;
solution.grid_fluence1 = solution.grid_fluence1/max(max(max(solution.grid_fluence1)));
fn2=reshape(sum(solution.grid_fluence1,2),size(solution.grid_fluence1,1),size(solution.grid_fluence1,3));
fn1=reshape(solution.grid_fluence1(:,12,:),size(solution.grid_fluence1,1),size(solution.grid_fluence1,3));
figure(4);clf
imagesc(z_arr',x_arr', (fn2));
%J_im1 = imrotate(J_im,90,'bilinear','crop');
xlabel('z [mm]');
ylabel('x [mm]');
%figure
%imshow(J_im1)
colorbar
clim([-0.5 2])
%colormap(makec2f)
